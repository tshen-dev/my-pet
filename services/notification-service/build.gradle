plugins {
  id 'org.springframework.boot' version '2.7.8'
  id 'io.spring.dependency-management' version '1.0.13.RELEASE'
  id "org.springframework.cloud.contract" version "3.1.5"
  id 'java'
  id 'maven-publish'
}

apply from: '../dependencies.gradle'

group = 'com.tshen.pet'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'
def clientJarName = rootProject.name + '-client'

repositories {
  mavenCentral()
  mavenLocal()
}

tasks.register('clientJar', Jar) {
  dependsOn classes
  shouldRunAfter {build}
  archiveBaseName.set(clientJarName)
  version = project.version
  includeEmptyDirs = false
  from sourceSets.main.output
  include("com\\tshen\\pet\\notification\\client\\**")
}

publishing {
  publications {
    utilities(MavenPublication) {
      artifact clientJar
      groupId group
      artifactId clientJarName
      version project.version
    }
    stubs(MavenPublication) {
      artifactId "${project.name}"
      artifact verifierStubsJar
    }
  }
}

build.finalizedBy publishToMavenLocal

dependencies {
  implementation project(":my-pet-utils")

  implementation libs.springStarter
  implementation libs.springStarterWeb
  implementation libs.springStarterConfig

  implementation libs.angusMail
  implementation libs.jakartaActivationApi
  implementation libs.jakartaMailApi

  developmentOnly devLibs.springDevTools

  compileOnly libs.lombok
  annotationProcessor libs.lombok

  testImplementation testLibs.springBootStarterTest
  testImplementation testLibs.springContractVerifier
  testImplementation testLibs.mockitoInline
}

test {
  useJUnitPlatform()
}

contractTest {
  useJUnitPlatform()
}

contracts {
  contractsDslDir = file("src/test/resources/contracts")
  testFramework = "JUNIT5"
  baseClassForTests = "com.tshen.pet.notification.contracts.ContractVerifierBase"
}

task stubsJar(type: Jar) {
  into("/") {
    include('**/*.groovy')
    from("${project.rootDir}/src/main/resources/contracts")
  }
}

contractTest {
  useJUnitPlatform()
  testLogging {
    exceptionFormat = 'full'
  }
  afterSuite { desc, result ->
    if (!desc.parent) {
      println "Results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
      boolean skipTests = Boolean.parseBoolean(project.findProperty('SKIP_TESTS') ?: "false" as String)
      if (result.testCount == 0 && !skipTests) {
        throw new IllegalStateException("No tests were found. Failing the build")
      }
    }
  }
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}
